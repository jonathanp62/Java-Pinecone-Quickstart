/*
 * (#)build.gradle  0.1.0   05/17/2025
 * (#)build.gradle  0.2.0   05/19/2025
 *
 * @author   Jonathan Parker
 * @version  0.2.0
 * @since    0.1.0
 *
 * MIT License
 *
 * Copyright (c) 2025 Jonathan M. Parker
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*
 * The following system property must be set in HOME/.gradle/gradle.properties:
 *   systemProp.macosArchitecture=intel -or-
 *   systemProp.macosArchitecture=silicon
 */

plugins {
	id 'java'
	id 'net.jmp.gradle.plugin.projectinfo-info'	version '0.1.0'
}

apply plugin: 'net.jmp.gradle.plugin.projectinfo-info'

ext {
	apiKey = 'etc/api-key.txt'
	embeddingModel = 'llama-text-embed-v2'
	enableNativeAccess = '--enable-native-access=ALL-UNNAMED'
	indexName = 'quickstart'
	javaMainClass = 'net.jmp.pinecone.quickstart.Main'
	namespace = 'quickstart-namespace'
	project.group = 'net.jmp.pinecone.quickstart'
	project.version = '0.2.0'
	project.description = 'to demonstrate the Pinecone Quickstart'
	rerankingModel = 'bge-reranker-v2-m3'
	queryText = 'Famous historical structures and monuments'
	useAssertions = '--enable-assertions'
}

java.sourceCompatibility = JavaVersion.VERSION_24

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(24)
	}
}

repositories {
	mavenLocal()
	mavenCentral()
}

dependencies {
	implementation		(libs.bundles.logging)
	implementation		(libs.io.pinecone.pinecone.client)

	runtimeOnly			(libs.bundles.logging.runtime)

	testRuntimeOnly		('org.junit.platform:junit-platform-launcher')
}

tasks.compileJava {
    options.forkOptions.jvmArgs = ["-Xmx8192m", "--enable-native-access=ALL-UNNAMED"]
}

tasks.withType(Javadoc).configureEach {
    CoreJavadocOptions cjo = options as CoreJavadocOptions
    StandardJavadocDocletOptions sjdo = options as StandardJavadocDocletOptions

    cjo.encoding("UTF-8")
    cjo.addStringOption("source", "24")
    cjo.memberLevel = JavadocMemberLevel.PRIVATE

    sjdo.version(true)
}

/*
 * Execute with - gradle execute instead of gradle run
 */

tasks.register('create', JavaExec) {
	allJvmArgs = [useAssertions, enableNativeAccess] as List<String>
	systemProperties(
			['app.apiKey': apiKey,
			 'app.embeddingModel': embeddingModel,
			 'app.indexName': indexName,
			 'app.namespace': namespace,
			 'app.rerankingModel': rerankingModel,
			 'app.queryText': queryText,
			 'app.operation': 'create']
	)
	classpath = sourceSets.main.runtimeClasspath
	javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
	mainClass = javaMainClass
}

tasks.register('delete', JavaExec) {
	allJvmArgs = [useAssertions, enableNativeAccess] as List<String>
	systemProperties(
			['app.apiKey': apiKey,
			 'app.embeddingModel': embeddingModel,
			 'app.indexName': indexName,
			 'app.namespace': namespace,
			 'app.rerankingModel': rerankingModel,
			 'app.queryText': queryText,
			 'app.operation': 'delete']
	)
	classpath = sourceSets.main.runtimeClasspath
	javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
	mainClass = javaMainClass
}

tasks.register('describe', JavaExec) {
	allJvmArgs = [useAssertions, enableNativeAccess] as List<String>
	systemProperties(
			['app.apiKey': apiKey,
			 'app.embeddingModel': embeddingModel,
			 'app.indexName': indexName,
			 'app.namespace': namespace,
			 'app.rerankingModel': rerankingModel,
			 'app.queryText': queryText,
			 'app.operation': 'describe']
	)
	classpath = sourceSets.main.runtimeClasspath
	javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
	mainClass = javaMainClass
}

tasks.register('describeNamespace', JavaExec) {
	allJvmArgs = [useAssertions, enableNativeAccess] as List<String>
	systemProperties(
			['app.apiKey': apiKey,
			 'app.embeddingModel': embeddingModel,
			 'app.indexName': indexName,
			 'app.namespace': namespace,
			 'app.rerankingModel': rerankingModel,
			 'app.queryText': queryText,
			 'app.operation': 'describeNamespace']
	)
	classpath = sourceSets.main.runtimeClasspath
	javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
	mainClass = javaMainClass
}

tasks.register('fetch', JavaExec) {
	allJvmArgs = [useAssertions, enableNativeAccess] as List<String>
	systemProperties(
			['app.apiKey': apiKey,
			 'app.embeddingModel': embeddingModel,
			 'app.indexName': indexName,
			 'app.namespace': namespace,
			 'app.rerankingModel': rerankingModel,
			 'app.queryText': queryText,
			 'app.operation': 'fetch']
	)
	classpath = sourceSets.main.runtimeClasspath
	javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
	mainClass = javaMainClass
}

tasks.register('list', JavaExec) {
	allJvmArgs = [useAssertions, enableNativeAccess] as List<String>
	systemProperties(
			['app.apiKey': apiKey,
			 'app.embeddingModel': embeddingModel,
			 'app.indexName': indexName,
			 'app.namespace': namespace,
			 'app.rerankingModel': rerankingModel,
			 'app.queryText': queryText,
			 'app.operation': 'list']
	)
	classpath = sourceSets.main.runtimeClasspath
	javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
	mainClass = javaMainClass
}

tasks.register('listIndexes', JavaExec) {
	allJvmArgs = [useAssertions, enableNativeAccess] as List<String>
	systemProperties(
			['app.apiKey': apiKey,
			 'app.embeddingModel': embeddingModel,
			 'app.indexName': indexName,
			 'app.namespace': namespace,
			 'app.rerankingModel': rerankingModel,
			 'app.queryText': queryText,
			 'app.operation': 'listIndexes']
	)
	classpath = sourceSets.main.runtimeClasspath
	javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
	mainClass = javaMainClass
}

tasks.register('listNamespaces', JavaExec) {
	allJvmArgs = [useAssertions, enableNativeAccess] as List<String>
	systemProperties(
			['app.apiKey': apiKey,
			 'app.embeddingModel': embeddingModel,
			 'app.indexName': indexName,
			 'app.namespace': namespace,
			 'app.rerankingModel': rerankingModel,
			 'app.queryText': queryText,
			 'app.operation': 'listNamespaces']
	)
	classpath = sourceSets.main.runtimeClasspath
	javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
	mainClass = javaMainClass
}

tasks.register('load', JavaExec) {
	allJvmArgs = [useAssertions, enableNativeAccess] as List<String>
	systemProperties(
			['app.apiKey': apiKey,
			 'app.embeddingModel': embeddingModel,
			 'app.indexName': indexName,
			 'app.namespace': namespace,
			 'app.rerankingModel': rerankingModel,
			 'app.queryText': queryText,
			 'app.operation': 'load']
	)
	classpath = sourceSets.main.runtimeClasspath
	javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
	mainClass = javaMainClass
}

tasks.register('query', JavaExec) {
	allJvmArgs = [useAssertions, enableNativeAccess] as List<String>
	systemProperties(
			['app.apiKey': apiKey,
			 'app.embeddingModel': embeddingModel,
			 'app.indexName': indexName,
			 'app.namespace': namespace,
			 'app.rerankingModel': rerankingModel,
			 'app.queryText': queryText,
			 'app.operation': 'query']
	)
	classpath = sourceSets.main.runtimeClasspath
	javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
	mainClass = javaMainClass
}
